import{_ as e,c as t,o as i,a as o}from"./app.1a9c46fa.js";const p=JSON.parse('{"title":"Our DNA","description":"","frontmatter":{},"headers":[{"level":2,"title":"About","slug":"about"},{"level":2,"title":"Vision","slug":"vision"},{"level":2,"title":"Culture","slug":"culture"},{"level":3,"title":"All remote","slug":"all-remote"},{"level":3,"title":"Open source","slug":"open-source"},{"level":2,"title":"Values","slug":"values"},{"level":3,"title":"\u{1F534} Empathy","slug":"\u{1F534}-empathy"},{"level":3,"title":"\u{1F7E0} Ownership","slug":"\u{1F7E0}-ownership"},{"level":3,"title":"\u{1F7E2} Balance","slug":"\u{1F7E2}-balance"},{"level":3,"title":"\u{1F535} Objectivity","slug":"\u{1F535}-objectivity"},{"level":3,"title":"\u{1F7E3} Openness","slug":"\u{1F7E3}-openness"},{"level":2,"title":"History","slug":"history"},{"level":3,"title":"2014: Origins of Apozy","slug":"_2014-origins-of-apozy"},{"level":3,"title":"2015: Apozy v1.0","slug":"_2015-apozy-v1-0"},{"level":3,"title":"2017: The YC days","slug":"_2017-the-yc-days"},{"level":3,"title":"2019: Birth of Airlock","slug":"_2019-birth-of-airlock"},{"level":3,"title":"2021: Interlock was founded","slug":"_2021-interlock-was-founded"},{"level":2,"title":"Why this way?","slug":"why-this-way"},{"level":3,"title":"Why do we use a wireframe-first approach?","slug":"why-do-we-use-a-wireframe-first-approach"},{"level":3,"title":"Why organize work in team-based kanban boards?","slug":"why-organize-work-in-team-based-kanban-boards"},{"level":3,"title":"Why a three-week cadence?","slug":"why-a-three-week-cadence"},{"level":3,"title":"Why use agile methodology?","slug":"why-use-agile-methodology"},{"level":3,"title":"Why the emphasis on training?","slug":"why-the-emphasis-on-training"},{"level":3,"title":"Why not continuously generate REST API reference docs from javadoc-style code comments?","slug":"why-not-continuously-generate-rest-api-reference-docs-from-javadoc-style-code-comments"},{"level":3,"title":"Why handbook-first strategy?","slug":"why-handbook-first-strategy"},{"level":2,"title":"Levels of confidentiality","slug":"levels-of-confidentiality"}],"relativePath":"handbook/dna.md"}'),a={name:"handbook/dna.md"},r=o('<h1 id="our-dna" tabindex="-1">Our DNA <a class="header-anchor" href="#our-dna" aria-hidden="true">#</a></h1><h2 id="about" tabindex="-1">About <a class="header-anchor" href="#about" aria-hidden="true">#</a></h2><p>Interlock is a blockchain network used to protect DeFi users and govern cybersecurity data. We make cybersecurity software that uses <strong>$ILOCK</strong> to secure people and sofware, but rewards <strong>$ILOCK</strong> to people who make DeFi safer.</p><h2 id="vision" tabindex="-1">Vision <a class="header-anchor" href="#vision" aria-hidden="true">#</a></h2><p><strong>We want to protect the internet while rewarding the people who make it safer.</strong></p><p>We are dedicated to:</p><ul><li>\u{1F441}\uFE0F remaining the freshest, simplest and earliest way to stop phishing and bad actors</li><li>\u{1F4B0} giving people the ability to benefit from and govern cybersecurity data collection efforts</li><li>\u{1FA99} protecting crypto wallets and smart contracts</li><li>\u{1FA9F} privacy, transparency, and trust through open source software</li><li>\u{1F4BB} beautiful, humane and frictionless user experiences</li><li>\u{1F9D1}\u200D\u{1F680} automating threat analysis and monitoring</li><li>\u23EC reducing the proliferation of security tools</li><li>\u{1F596} making the web less spammy and hostile</li></ul><h2 id="culture" tabindex="-1">Culture <a class="header-anchor" href="#culture" aria-hidden="true">#</a></h2><h3 id="all-remote" tabindex="-1">All remote <a class="header-anchor" href="#all-remote" aria-hidden="true">#</a></h3><p>Interlock is an all-remote company with team members spread across two continents and four time zones. The broader team of contributors <a href="https://github.com/interlock-network" target="_blank" rel="noopener noreferrer">worldwide</a> submits patches, bug reports, troubleshooting tips, improvements, and real-world insights to Interlocks&#39;s open source code base, documentation, website, and company handbook.</p><h3 id="open-source" tabindex="-1">Open source <a class="header-anchor" href="#open-source" aria-hidden="true">#</a></h3><p>The majority of the code, documentation, and content we create at Interlock is public and source-available. We strive to be open and transparent in the way we run the business, as much as confidentiality agreements (and time) allow. We perform better with an audience, and our audience performs better with us.</p><h2 id="values" tabindex="-1">Values <a class="header-anchor" href="#values" aria-hidden="true">#</a></h2><p>Interlocks&#39;s values are a set of five ideals adopted by everyone on the team. They describe the culture we are working together to deliver, inside and outside the company:</p><ol><li>\u{1F534} Empathy</li><li>\u{1F7E0} Ownership</li><li>\u{1F7E2} Balance</li><li>\u{1F535} Objectivity</li><li>\u{1F7E3} Openness</li></ol><p>When a new team member joins Interlock, they adopt the values, from day one. This way, even as the company grows, everybody knows what to expect from the people with whom they work. Having a shared mindset keeps us quick and determined.</p><h3 id="\u{1F534}-empathy" tabindex="-1">\u{1F534} Empathy <a class="header-anchor" href="#\u{1F534}-empathy" aria-hidden="true">#</a></h3><p>Empathy leads to better understanding, better communication, and better decisions. Try to understand what people may be going through, so you can help make it better.</p><ul><li><strong>Think and make user-first choices.</strong></li><li><strong>Consider your counterpart.</strong><ul><li>For example: keep in mind customers, contributors, colleagues, the other person in your video meeting, the other folks in a Discord channel, and the people who use software and APIs you build, the people following the processes you design.</li><li>Ask questions in a way you would want to be asked.</li><li>Assume others have positive intent.</li><li>Be kind.</li><li>Quickly review pending changes when your review is requested. </li><li>Be punctual.</li><li>End meetings on time.</li></ul></li><li><strong>Role play as a user.</strong><ul><li>Don&#39;t be afraid to rely on your imagination to understand. </li><li>Developers are users too (REST API, smart contracts, airlock, docs).</li><li>Contributor experience matters (but product quality and commitments come first).</li><li>Bugs cause frustrating experiences and alienate users.</li><li>Create patches with care (upgrading to new releases can be time-consuming for users running self-managed deployments). </li><li>Confusing error messages make people feel helpless and can fill them with despair.</li><li>Error messages deserve to be good (spending time on them is worth it).</li><li>UI help text and labels deserve to be good (it&#39;s worth it to spend time on them).</li></ul></li><li><strong>Invest in hospitality.</strong><ul><li>&quot;Be a helper.&quot; -Mr. Rogers</li><li>Think and say <a href="https://www.theatlantic.com/family/archive/2018/06/mr-rogers-neighborhood-talking-to-kids/562352/" target="_blank" rel="noopener noreferrer">positive things</a>.</li><li>Show genuine gratitude for other team members&#39; actions say it in chat.</li><li>Talking with users and contributors is time well spent.</li><li>Embrace the excitement of others (it&#39;s contagious).</li><li>Make small talk at the beginning of meetings.</li><li>Be generous (go above and beyond, especially for customers/contributors)</li><li>Apply customer service principles to all users, even if they never use Interlock.</li><li>Treat everyone as our guests.</li><li>Better humanity.</li></ul></li></ul><h3 id="\u{1F7E0}-ownership" tabindex="-1">\u{1F7E0} Ownership <a class="header-anchor" href="#\u{1F7E0}-ownership" aria-hidden="true">#</a></h3><ul><li><strong>Take responsibility.</strong><ul><li>Think like an owner. See <a href="./founders.html">founder&#39;s manual</a>.</li><li>Follow through on commitments (actions match your words).</li><li>Own up to mistakes.</li><li>Understand why it matters (the goals of the work you are doing).</li><li>Consider the business impact (fast forward 12 months, consider the total cost of ownership over the eternity of maintenance).</li><li>Often, you&#39;ll need to own processes that won&#39;t scale. Not everything should be automated from the start. Your experience with doing things manually will teach us how to scale effectively later. <strong>Do not try to scale things upfront.</strong></li></ul></li><li><strong>Be responsive.</strong><ul><li>Respond quickly, even if you can&#39;t take further action at that exact moment.</li><li>When you disagree, give your feedback; then agree and commit, or disagree and commit anyway.</li><li>Favor short calls over long asynchronous back and forth discussions in Discord, or Github.</li><li>Procrastination is a symptom of not knowing what to do next (if you find yourself avoiding reading or responding to a message, schedule a Discord call with the people you need to figure it out).</li></ul></li><li><strong>We win or lose together.</strong><ul><li>Think about the big picture beyond your individual team/project goals.</li><li>Success equals creating value for customers and stakeholders.</li><li>You&#39;re not alone in this (There&#39;s a great community of people able and happy to help).</li><li>Don&#39;t be afraid to spend time helping users, customers, and contributors (including colleagues on other teams).</li><li>Be proactive (ask other contributors how you can help, regardless of who is assigned to what</li><li>Finish completely before moving to something new (help unblock team members and other contributors to deliver value). </li></ul></li><li><strong>Take pride in your work.</strong><ul><li>Be efficient (your time is valuable, your work matters, and your focus is a finite resource).</li><li>You don&#39;t need permission to be thoughtful.</li><li>Reread anything you write for users. Check everything that a user might read for clarity, spelling errors, and to make sure that it provides value.</li><li>Take your ideas seriously (great ideas come from everyone; write them out and see if they have merit).</li><li>Think for yourself (<a href="https://en.wikipedia.org/wiki/First_principle" target="_blank" rel="noopener noreferrer">from first principles</a>).</li><li>Use reason (believe in your brain&#39;s capacity to evaluate a solution or idea, regardless of its popularity).</li><li>You are on a hero&#39;s journey (motivate yourself intrinsically with self-talk; even boring tasks are more motivating, fun, and effective when you care).</li><li>Better your results.</li></ul></li></ul><h3 id="\u{1F7E2}-balance" tabindex="-1">\u{1F7E2} Balance <a class="header-anchor" href="#\u{1F7E2}-balance" aria-hidden="true">#</a></h3><p>Between overthinking and rushing, there is a <a href="https://en.wikipedia.org/wiki/Golden_mean_%28philosophy%29" target="_blank" rel="noopener noreferrer">golden mean</a>.</p><ul><li><strong>Iterate your work.</strong><ul><li>Work in baby steps. Look for ways to make the smallest, minimally viable change. Small changes provide faster feedback, and help us to stay focused on quality.</li><li>Pick low-hanging fruit (deliver value quickly where you can).</li><li>Think ahead, then make the right decision for now.</li><li>Look before you leap (when facing a non-trivial problem, get perspective before diving in; there may be a simpler solution). When facing a (non-trivial) problem, take a step back before diving into fixing it - put the problem back in context, think about the actual goal and not just the issue itself, sometimes the obvious solution misses the end goal, sometimes a simpler solution will emerge, or it may just confirm that the fix is the right one and you can go ahead with better confidence.</li></ul></li><li><strong>Move quickly.</strong><ul><li>&quot;Everything is in draft.&quot;</li><li>Think fast (balance thoughtfulness and planning with moving quickly).</li><li>Aim to deliver results daily, not weekly or bi-weekly.</li><li>Move faster than 90% of the humans you know.</li><li>Resist gold-plating and avoid <a href="https://en.wikipedia.org/wiki/Law_of_triviality" target="_blank" rel="noopener noreferrer">bike-shedding</a>.</li></ul></li><li><strong>Remember, less is more.</strong><ul><li>Focus on fewer tasks at one time. By focusing on fewer tasks at once, we are able to get more done, and to a higher standard, while feeling more positive about our work in the process.</li><li>Go with &quot;boring solutions.&quot;</li><li>Finish what you start, or at least throw it away loudly in case someone else wants it.</li><li>Keep it simple (prioritize simplicity; people crave mental space in design, collaboration, and most areas of life). </li><li>Use fewer words (lots of text equals lots of work).</li><li>As time allows (&quot;I would have written a shorter letter, but I did not have the time.&quot; -Blaise Pascal).</li></ul></li><li><strong>Make time for self-care.</strong><ul><li>This helps you bring your best self when communicating with others, making decisions, etc.</li><li>Consider taking a break or going for a walk.</li><li>Take time off (it is better to have 100% focus for 80% of the time than it is to have 80% focus for 100% of the time).</li><li>Think about how to organize your day/work hours to best fit your life and maximize your focus.</li></ul></li><li><strong>Better focus.</strong></li></ul><h3 id="\u{1F535}-objectivity" tabindex="-1">\u{1F535} Objectivity <a class="header-anchor" href="#\u{1F535}-objectivity" aria-hidden="true">#</a></h3><ul><li><strong>Be curious.</strong><ul><li>Ask great questions &amp; take the time to listen truly.</li><li>Listen intently to feedback and genuinely try to understand (especially constructive criticism). </li><li>See failure as a beginning (it is rare to get things right the first time).</li><li>Question yourself (&quot;Why do I think this?&quot;).</li></ul></li><li><strong>Underpromise and overdeliver.</strong><ul><li>Quality results often take longer than we anticipate.</li><li>Be practical about your limits and about what&#39;s possible with the time and resources we have.</li><li>Be thorough (don&#39;t settle for &quot;the happy path&quot;; every real-world edge case deserves handling).</li></ul></li><li><strong>Prioritize the truth (reality).</strong><ul><li>Be wrong and show your work (it&#39;s better to make the right decision than it is to be right).</li><li>Think &quot;strong opinions, loosely held&quot; (proceed boldly, but change your mind in the face of new evidence)</li><li>Avoid the sunk cost fallacy (getting attached to something just because you invested time working on it or came up with it).</li><li>Be fair to competitors (&quot;may the best product win.&quot;).</li><li>Give credit where credit is due; don&#39;t show favoritism. </li><li>Hold facts, over commentary.</li></ul></li><li><strong>Speak computer to computers</strong><ul><li>A lucky fix without understanding does more harm than good.</li><li>When something isn&#39;t working, use the scientific method.</li><li>Especially think like a computer when there is a bug, or when something is slow, or when a customer experiences a problem.</li><li>Assume it&#39;s your fault.</li><li>Assume nothing else.</li></ul></li><li><strong>Better your rigor.</strong></li></ul><h3 id="\u{1F7E3}-openness" tabindex="-1">\u{1F7E3} Openness <a class="header-anchor" href="#\u{1F7E3}-openness" aria-hidden="true">#</a></h3><ul><li><strong>Anyone can contribute to Interlock.</strong><ul><li>Be outsider-friendly, inclusive, and approachable.</li><li><a href="http://www.paulgraham.com/writing44.html" target="_blank" rel="noopener noreferrer">Use small words</a>, so readers understand more easily.</li><li>Prioritize accessible terminology and simple explanations to provide value to the largest possible audience of users.</li><li>Avoid acronyms and idioms which might not translate.</li><li>Welcome contributions to your team&#39;s work from people inside or outside the company.</li><li>Get comfortable letting others contribute to your domain.</li><li>Believe in everyone.</li></ul></li><li><strong>Write everything down.</strong><ul><li>Use the &quot;handbook first&quot; strategy.</li><li>Writing your work down makes it real and allows others to read on their own time (and in their own timezone).</li><li>Never stop consolidating and deduplicating content (gradually, consistently, bit by bit).</li></ul></li><li><strong>Embrace candor.</strong><ul><li>Have &quot;short toes,&quot; and don&#39;t be afraid of stepping on toes.</li><li>Don&#39;t be afraid to speak up (ask questions, be direct, and interrupt).</li><li>Give pointed and respectful feedback. </li><li>Take initiative in trying to improve things (no need to wait <a href="https://twitter.com/ryanfalor/status/1182647229414166528?s=12" target="_blank" rel="noopener noreferrer">for a consensus</a>).</li><li>Communicate openly (if you think you should send a message to communicate something, send it, but keep comments brief and relevant).</li></ul></li><li><strong>Be transparent.</strong><ul><li>Everything we do is &quot;public by default.&quot;</li><li>We build in the open.</li><li>Declassify with care (easier to overlook confidential info when declassifying vs. when changing something that is already public from the get-go).</li><li><a href="https://twitter.com/mikermcneil/status/1476799587423772674" target="_blank" rel="noopener noreferrer">Open source is forever</a>.</li></ul></li><li><strong>Better your collaboration.</strong><ul><li>DM&#39;s can limit collaboration. Only DM to collaborate when it makes sense, most conversations can benefit from greater visibility. If you feel its too noisy for general channels, start a thread instead.</li><li>If the conversation produces an actionable outcome, create a Github issue for it.</li><li>If the conversation is relevant to an existing Github issue, be sure to update the issue after the conversation.</li></ul></li></ul><h2 id="history" tabindex="-1">History <a class="header-anchor" href="#history" aria-hidden="true">#</a></h2><h3 id="_2014-origins-of-apozy" tabindex="-1">2014: Origins of Apozy <a class="header-anchor" href="#_2014-origins-of-apozy" aria-hidden="true">#</a></h3><p>In 2014, ethical hackers <a href="https://github.com/rickdeaconx" target="_blank" rel="noopener noreferrer">Rick</a> and <a href="https://github.com/justerhan" target="_blank" rel="noopener noreferrer">Erhan</a> noticed that spear-phishing was the primary cause of breaches at large companies. They founded Apozy to make the workforce more resilient against phishing attacks.</p><h3 id="_2015-apozy-v1-0" tabindex="-1">2015: Apozy v1.0 <a class="header-anchor" href="#_2015-apozy-v1-0" aria-hidden="true">#</a></h3><p>A high-fidelity security awareness platform was created to test and train enterprise workforces. It was designed to continuously emulate real-world attacks and improve breach resilience.</p><h3 id="_2017-the-yc-days" tabindex="-1">2017: The YC days <a class="header-anchor" href="#_2017-the-yc-days" aria-hidden="true">#</a></h3><p>Despite strong breach resistance, spear-phishing attacks were too sophisticated. The product shifted away from training and focused on using emerging visual tech to spot phishing sites and sandbox them in real-time.</p><h3 id="_2019-birth-of-airlock" tabindex="-1">2019: Birth of Airlock <a class="header-anchor" href="#_2019-birth-of-airlock" aria-hidden="true">#</a></h3><p>Protection capabilities advanced to provide comprehensive data and telemetry for malicious extensions, malvertising and randsomware.</p><h3 id="_2021-interlock-was-founded" tabindex="-1">2021: Interlock was founded <a class="header-anchor" href="#_2021-interlock-was-founded" aria-hidden="true">#</a></h3><p>With the addition of <a href="https://github.com/galactic-beyond" target="_blank" rel="noopener noreferrer">Nick</a>, Interlock was founded. We are pioneering an ecosystem of security products made for Web3 extending our protection capabilities to smart contracts while rewarding people who share data to make the internet safer.</p><h2 id="why-this-way" tabindex="-1">Why this way? <a class="header-anchor" href="#why-this-way" aria-hidden="true">#</a></h2><h3 id="why-do-we-use-a-wireframe-first-approach" tabindex="-1">Why do we use a wireframe-first approach? <a class="header-anchor" href="#why-do-we-use-a-wireframe-first-approach" aria-hidden="true">#</a></h3><p>Wireframing (or &quot;drafting,&quot; as we often refer to it at Interlock) provides a clear overview of page layout, information architecture, user flow, and functionality. The wireframe-first approach extends beyond what users see on their screens. Wireframe-first is also excellent for drafting APIs, config settings, CLI options, and even business processes.</p><p>Here&#39;s why we use a wireframe-first approach at Interlock.</p><ul><li>We create a wireframe for every change we make and favor small, iterative changes to deliver value quickly.</li><li>We can think through the functionality and user experience more deeply by wireframing before committing any code. As a result, our coding decisions are clearer, and our code is cleaner and easier to maintain.</li><li>Content hierarchy, messaging, error states, interactions, URLs, API parameters, and API response data are all considered during the wireframing process (often with several rounds of review). This initial quality assurance means engineers can focus on their code and confidently catch any potential edge-cases or issues along the way.</li><li>Wireframing is accessible to people who understand our users but are not necessarily code-literate. So anyone can contribute a suggestion (at any level of fidelity). At the very least, you&#39;ll need a napkin and a pen, although we prefer to use Figma.</li><li>With Figma, thanks to its powerful component and auto-layout features, we can create high-fidelity wireframes - fast. We can iterate quickly without costing more work and less <a href="https://dictionary.cambridge.org/dictionary/english/sunk-cost-fallacy" target="_blank" rel="noopener noreferrer">sunk-cost fallacy</a>.</li></ul><h3 id="why-organize-work-in-team-based-kanban-boards" tabindex="-1">Why organize work in team-based kanban boards? <a class="header-anchor" href="#why-organize-work-in-team-based-kanban-boards" aria-hidden="true">#</a></h3><p>It&#39;s helpful to have a consistent framework for how every team works, plans, and requests things from each other. Interlock&#39;s kanban boards are that framework, and they cover three goals:</p><ol><li><strong>Intake:</strong> Give people from anywhere in the world the ability to request something from a particular team (i.e., add it to their backlog).</li><li><strong>Planning:</strong> Give the team&#39;s manager and other team members a way to plan the next three-week iteration of what the team is working on in a world (the board) where the team has ownership and feels confident making changes.</li><li><strong>Shared to-do list:</strong> What should I work on next? Who needs help? What important work is blocked? Is that bug fix merged yet? When will it be released? When will that new feature ship? What did I do yesterday?</li></ol><h3 id="why-a-three-week-cadence" tabindex="-1">Why a three-week cadence? <a class="header-anchor" href="#why-a-three-week-cadence" aria-hidden="true">#</a></h3><p>The Interlock product is released every three weeks. By syncing the whole company to this schedule, we can:</p><ul><li>keep all team members (especially those who aren&#39;t directly involved with the core product) aware of the current version of Interlock and when the next release is shipping.</li><li>align project planning and milestones across all teams, which helps us schedule our content calendar and manage company-wide goals.</li></ul><h3 id="why-use-agile-methodology" tabindex="-1">Why use agile methodology? <a class="header-anchor" href="#why-use-agile-methodology" aria-hidden="true">#</a></h3><p>Releasing software iteratively gets changes and improvements into the hands of users faster and generally results in software that works. This makes contributors fitter, happier, and more productive. See <a href="https://agilemanifesto.org/" target="_blank" rel="noopener noreferrer">the agile manifesto</a> for more information.</p><h3 id="why-the-emphasis-on-training" tabindex="-1">Why the emphasis on training? <a class="header-anchor" href="#why-the-emphasis-on-training" aria-hidden="true">#</a></h3><p>Investing in people and providing generous, prioritized training, especially up front, helps contributors understand what is going on at Interlock. By making training a prerequisite at Interlock, we can:</p><ul><li>help team members feel confident in the better decisions they make at work.</li><li>create a culture of helping others, which results in team members feeling more comfortable even if they aren\u2019t familiar with the osquery, security, startup, or IT space.</li><li>if possible, record training sessions for others</li></ul><h3 id="why-not-continuously-generate-rest-api-reference-docs-from-javadoc-style-code-comments" tabindex="-1">Why not continuously generate REST API reference docs from javadoc-style code comments? <a class="header-anchor" href="#why-not-continuously-generate-rest-api-reference-docs-from-javadoc-style-code-comments" aria-hidden="true">#</a></h3><p>We prefer to generate our REST API reference docs the good old-fashioned way. By hand. Here are a few of the drawbacks that we have experienced when generating docs via tools like Swagger or OpenAPI and some plus ones for doing it by hand with Markdown.</p><ul><li>Markdown gives us more control over how the docs are compiled, what annotations we can include, and how we present the information to the end-user.</li><li>Markdown is more accessible. Anyone can edit Interlock&#39;s docs directly from our website without needing coding experience.</li><li>A single Markdown file reduces the amount of surface area to manage that comes from spreading code comments across multiple files throughout the codebase. (see <a href="#why-do-we-use-one-repo">&quot;Why do we use one repo?&quot;</a>).</li><li>Generated docs can become just as outdated as handmade docs, except since they are generated, they become siloed and more difficult to edit.</li><li>Autogenerated docs are typically hosted on a subdomain. This means we have less control over a user&#39;s journey through our website and lose the SEO benefits of self-hosted documentation.</li><li>Autogenerating docs from code is not always the best way to make sure reference docs accurately reflect the API. Based on our experience from past projects, we&#39;ve learned that the benefits of generated docs do not outweigh the drawbacks of creating them by hand.</li><li>As the Interlock REST API, documentation, and tools mature, a more declarative format such as OpenAPI might become the source of truth, but only after investing in a format and processes to make it visible, accessible, and modifiable for all contributors.</li></ul><h3 id="why-handbook-first-strategy" tabindex="-1">Why handbook-first strategy? <a class="header-anchor" href="#why-handbook-first-strategy" aria-hidden="true">#</a></h3><p>The Interlock handbook provides team members with up-to-date information about how to do things in the company. By adopting the handbook-first strategy, we can encourage a culture of self-service and self-learning, which is essential for daily a-synchronous work as part of an all-remote team.</p><p>This strategy was inspired by GitLab, which uses it with great effect. Check out this <a href="https://www.youtube.com/watch?v=aZrK8AQM8Ro" target="_blank" rel="noopener noreferrer">short three-minute video</a> about their take on the handbook-first approach.</p><h2 id="levels-of-confidentiality" tabindex="-1">Levels of confidentiality <a class="header-anchor" href="#levels-of-confidentiality" aria-hidden="true">#</a></h2><ul><li><em>Public</em> <em>(share with anyone, anywhere in the world)</em></li><li><em>Confidential</em> <em>(share only with team members who&#39;ve signed an NDA, consulting agreement, or employment agreement)</em></li><li><em>Classified</em> <em>(share only with founders of Interlock, peepops, and/or the people involved. e.g., US social security numbers during hiring)</em></li></ul>',63),n=[r];function s(l,h,d,c,u,m){return i(),t("div",null,n)}var f=e(a,[["render",s]]);export{p as __pageData,f as default};
